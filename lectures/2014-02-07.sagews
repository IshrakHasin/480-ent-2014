︠86c9ac3d-4b81-4c92-b925-9130e86897eai︠
%md
# February 7, 2014: Elliptic Curves...

- on feb 7 mainly use 2014-02-03; but also, something about Diffie-Hellman below.
︡5fa924ad-d1eb-4a2a-9736-4941b7b370f2︡{"html":"<h1>February 7, 2014: Elliptic Curves&#8230;</h1>\n\n<ul>\n<li>on feb 7 mainly use 2014-02-03; but also, something about Diffie-Hellman below.</li>\n</ul>\n"}︡
︠202e2611-9cab-47aa-be8b-67d4cc87a288i︠
%md
## Recall -- Diffie-Hellman


### The protocol

- Choose a prime $p$.

- Choose a base $g$ in $\mathbf{F}_p$.

- Person 1 sends $g^n\pmod{p}$ and person 2 sends $g^m\pmod{p}$, where $n,m$ are chosen at random.

- The shared secret is $s = g^{nm} \pmod{p}$, which both parties can compute.
︡ceb0b241-407b-418e-a780-e638c1acade1︡{"html":"<h2>Recall &#8211; Diffie-Hellman</h2>\n\n<h3>The protocol</h3>\n\n<ul>\n<li><p>Choose a prime $p$.</p></li>\n<li><p>Choose a base $g$ in $\\mathbf{F}_p$.</p></li>\n<li><p>Person 1 sends $g^n\\pmod{p}$ and person 2 sends $g^m\\pmod{p}$, where $n,m$ are chosen at random.</p></li>\n<li><p>The shared secret is $s = g^{nm} \\pmod{p}$, which both parties can compute.</p></li>\n</ul>\n"}︡
︠2379f925-7c16-4da0-a557-51a0109e05f0︠
p = next_prime(2^127)
g = Mod(2,p); g
︡03d34fb6-2ce6-4478-95f6-87494e710882︡{"stdout":"2\n"}︡
︠de0b61a6-c27b-40b6-9ce9-4873e865eba4︠
g.multiplicative_order()
︡f734bd9e-3a95-4774-b15a-abacdc8efa2f︡{"stdout":"170141183460469231731687303715884105756\n"}︡
︠c0e3bbb7-6043-4fee-80b4-feedd93ee7a7︠
p-1
︡c1244616-e5b2-4223-9677-76797f4a07eb︡{"stdout":"170141183460469231731687303715884105756\n"}︡
︠3f665377-90d4-41d6-ae38-472894218bf0i︠
%md
### Attack

- To **attack** Diffie-Hellman, you solve the discrete log probem in the group generated by $g$.

- The **complexity** is the same as attacking this problem in the largest prime divisor of the order of $g$

- A trivial-to-implement algorithm called "baby-step giant-step" solves discrete log in any group of order $r$ in time (and space) $\sqrt{r}$.
︡e220c5ab-8da4-4efb-aee9-f751d9935f91︡{"html":"<h3>Attack</h3>\n\n<ul>\n<li><p>To <strong>attack</strong> Diffie-Hellman, you solve the discrete log probem in the group generated by $g$.</p></li>\n<li><p>The <strong>complexity</strong> is the same as attacking this problem in the largest prime divisor of the order of $g$</p></li>\n<li><p>A trivial-to-implement algorithm called &#8220;baby-step giant-step&#8221; solves discrete log in any group of order $r$ in time (and space) $\\sqrt{r}$.</p></li>\n</ul>\n"}︡
︠4074b639-bb0c-41e9-8ae2-ce743eb1d08e︠
show(factor(g.multiplicative_order()))
︡736798d9-de49-4d70-9045-9d56312ccc6a︡{"tex":{"tex":"2^{2} \\cdot 3 \\cdot 13 \\cdot 23 \\cdot 79151 \\cdot 54721235939 \\cdot 10948250129457457283","display":true}}︡
︠6f33c5b3-ef18-4b95-81b8-eecb607f5e07i︠
%md
So in our example, the number of operations needed to solve DL is basically $\sqrt{10948250129457457283}$:
︡d9db7251-28bd-4d6c-8f9f-7360bd4df775︡{"html":"<p>So in our example, the number of operations needed to solve DL is basically $\\sqrt{10948250129457457283}$:</p>\n"}︡
︠fc7af0b3-b673-4ff6-8ffa-529c10152037︠
# with a really fast computer and good implementation, that's about this many seconds:
N(sqrt(10948250129457457283)) / 1e9
︡bc06c216-412c-412b-a9db-7fe68aa846f5︡{"stdout":"3.30881400647686\n"}︡
︠9542da32-d705-4d19-bf84-c2fbb371b267i︠
%md
## So...

**Moral:** When creating a Diffie-Hellman key exchange, make sure that the group generated by $g$ is of order: (big prime) times (little stuff).

For example, choose $g=2$ so that it has order $p-1$ and such that $(p-1)/2$ is prime.  Primality testing is fast, so this is do-able.
︡4ade1ee6-bef4-4ad2-8e00-6b1ce873cb71︡{"html":"<h2>So&#8230;</h2>\n\n<p><strong>Moral:</strong> When creating a Diffie-Hellman key exchange, make sure that the group generated by $g$ is of order: (big prime) times (little stuff).</p>\n\n<p>For example, choose $g=2$ so that it has order $p-1$ and such that $(p-1)/2$ is prime.  Primality testing is fast, so this is do-able.</p>\n"}︡
︠e9cdf1ef-0d86-437e-bf4b-133049f0e204i︠
%md
## Diffie-Hellman on an elliptic curve

Introduced to the world by our very own Neal Koblitz (and also by Victor Miller at the same time)...

- Choose a specific elliptic curve $E$ over a finite field $\mathbf{F}_p$ (same thing as $\mathbf{Z}/p\mathbf{Z}$.

- Choose a specific point $G \in E(\mathbf{F}_p)$.

- Person 1 sends $nG$ and person 2 sends $mG$, for random $n$ and $m$.

- The shared secret is the point $nmG$.

### Big problem

- How on earth are you going to know that $G$ has order that is not just a product of small primes?

- This is nothing like testing $(p-1)/2$ for primality.

- Seems really hard.
︡89f53aa5-4366-4f49-99af-ba612aaebe69︡{"html":"<h2>Diffie-Hellman on an elliptic curve</h2>\n\n<p>Introduced to the world by our very own Neal Koblitz (and also by Victor Miller at the same time)&#8230;</p>\n\n<ul>\n<li><p>Choose a specific elliptic curve $E$ over a finite field $\\mathbf{F}_p$ (same thing as $\\mathbf{Z}/p\\mathbf{Z}$.</p></li>\n<li><p>Choose a specific point $G \\in E(\\mathbf{F}_p)$.</p></li>\n<li><p>Person 1 sends $nG$ and person 2 sends $mG$, for random $n$ and $m$.</p></li>\n<li><p>The shared secret is the point $nmG$.</p></li>\n</ul>\n\n<h3>Big problem</h3>\n\n<ul>\n<li><p>How on earth are you going to know that $G$ has order that is not just a product of small primes?</p></li>\n<li><p>This is nothing like testing $(p-1)/2$ for primality. </p></li>\n<li><p>Seems really hard.</p></li>\n</ul>\n"}︡
︠b99c7aec-d9e2-49cd-8e50-8090a87f8183︠
# Rene Schoof didn't think so...
salvus.file('9aa5a04f7649.jpg')
︡de35b4f5-7155-453a-ae71-26df79f074d6︡{"once":false,"file":{"show":true,"uuid":"48eab665-1445-439a-b854-c602e84d47a2","filename":"9aa5a04f7649.jpg"}}︡
︠efe545b4-bc6f-4825-9a84-9e1a01ef60be︠









