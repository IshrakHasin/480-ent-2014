︠86c9ac3d-4b81-4c92-b925-9130e86897eai︠
%md
# February 7, 2014: Elliptic Curves...

- on feb 7 mainly use 2014-02-03; but also, something about Diffie-Hellman below.
- <http://youtu.be/DV0GNfTnx7Y>
︡229e3736-e5bc-4034-92cb-34955d6770e7︡{"html":"<h1>February 7, 2014: Elliptic Curves&#8230;</h1>\n\n<ul>\n<li>on feb 7 mainly use 2014-02-03; but also, something about Diffie-Hellman below.</li>\n<li><a href=\"http://youtu.be/DV0GNfTnx7Y\">http://youtu.be/DV0GNfTnx7Y</a></li>\n</ul>\n"}︡
︠202e2611-9cab-47aa-be8b-67d4cc87a288i︠
%md
## Recall -- Diffie-Hellman


### The protocol

- Choose a prime $p$.

- Choose a base $g$ in $\mathbf{F}_p$.

- Person 1 sends $g^n\pmod{p}$ and person 2 sends $g^m\pmod{p}$, where $n,m$ are chosen at random.

- The shared secret is $s = g^{nm} \pmod{p}$, which both parties can compute.
︡ceb0b241-407b-418e-a780-e638c1acade1︡{"html":"<h2>Recall &#8211; Diffie-Hellman</h2>\n\n<h3>The protocol</h3>\n\n<ul>\n<li><p>Choose a prime $p$.</p></li>\n<li><p>Choose a base $g$ in $\\mathbf{F}_p$.</p></li>\n<li><p>Person 1 sends $g^n\\pmod{p}$ and person 2 sends $g^m\\pmod{p}$, where $n,m$ are chosen at random.</p></li>\n<li><p>The shared secret is $s = g^{nm} \\pmod{p}$, which both parties can compute.</p></li>\n</ul>\n"}︡
︠2379f925-7c16-4da0-a557-51a0109e05f0︠
p = next_prime(2^127)
g = Mod(2,p); g
︡4f75d031-d6b1-4ccf-93cd-9df2624dad1a︡{"stdout":"2\n"}︡
︠de0b61a6-c27b-40b6-9ce9-4873e865eba4︠
g.multiplicative_order()
︡024bca5a-7883-4994-991b-ad0e6e1704d7︡{"stdout":"170141183460469231731687303715884105756"}︡{"stdout":"\n"}︡
︠c0e3bbb7-6043-4fee-80b4-feedd93ee7a7︠
p-1
︡fd363044-c531-49cf-9496-079ca387cdfe︡{"stdout":"170141183460469231731687303715884105756\n"}︡
︠3f665377-90d4-41d6-ae38-472894218bf0i︠
%md
### Attack

- To **attack** Diffie-Hellman, you solve the discrete log probem in the group generated by $g$.

- The **complexity** is the same as attacking this problem in the largest prime divisor of the order of $g$

- A trivial-to-implement algorithm called "baby-step giant-step" solves discrete log in any group of order $r$ in time (and space) $\sqrt{r}$.
︡e220c5ab-8da4-4efb-aee9-f751d9935f91︡{"html":"<h3>Attack</h3>\n\n<ul>\n<li><p>To <strong>attack</strong> Diffie-Hellman, you solve the discrete log probem in the group generated by $g$.</p></li>\n<li><p>The <strong>complexity</strong> is the same as attacking this problem in the largest prime divisor of the order of $g$</p></li>\n<li><p>A trivial-to-implement algorithm called &#8220;baby-step giant-step&#8221; solves discrete log in any group of order $r$ in time (and space) $\\sqrt{r}$.</p></li>\n</ul>\n"}︡
︠4074b639-bb0c-41e9-8ae2-ce743eb1d08e︠
show(factor(g.multiplicative_order()))
︡736798d9-de49-4d70-9045-9d56312ccc6a︡{"tex":{"tex":"2^{2} \\cdot 3 \\cdot 13 \\cdot 23 \\cdot 79151 \\cdot 54721235939 \\cdot 10948250129457457283","display":true}}︡
︠6f33c5b3-ef18-4b95-81b8-eecb607f5e07i︠
%md
So in our example, the number of operations needed to solve DL is basically $\sqrt{10948250129457457283}$:
︡d9db7251-28bd-4d6c-8f9f-7360bd4df775︡{"html":"<p>So in our example, the number of operations needed to solve DL is basically $\\sqrt{10948250129457457283}$:</p>\n"}︡
︠fc7af0b3-b673-4ff6-8ffa-529c10152037︠
# with a really fast computer and good implementation, that's about this many seconds:
N(sqrt(10948250129457457283)) / 1e9
︡bc06c216-412c-412b-a9db-7fe68aa846f5︡{"stdout":"3.30881400647686\n"}︡
︠9542da32-d705-4d19-bf84-c2fbb371b267i︠
%md
## So...

**Moral:** When creating a Diffie-Hellman key exchange, make sure that the group generated by $g$ is of order: (big prime) times (little stuff).

For example, choose $g=2$ so that it has order $p-1$ and such that $(p-1)/2$ is prime.  Primality testing is fast, so this is do-able.
︡4ade1ee6-bef4-4ad2-8e00-6b1ce873cb71︡{"html":"<h2>So&#8230;</h2>\n\n<p><strong>Moral:</strong> When creating a Diffie-Hellman key exchange, make sure that the group generated by $g$ is of order: (big prime) times (little stuff).</p>\n\n<p>For example, choose $g=2$ so that it has order $p-1$ and such that $(p-1)/2$ is prime.  Primality testing is fast, so this is do-able.</p>\n"}︡
︠e9cdf1ef-0d86-437e-bf4b-133049f0e204i︠
%md
## Diffie-Hellman on an elliptic curve

Introduced to the world by our very own Neal Koblitz (and also by Victor Miller at the same time)...

- Choose a specific elliptic curve $E$ over a finite field $\mathbf{F}_p$ (same thing as $\mathbf{Z}/p\mathbf{Z}$.

- Choose a specific point $G \in E(\mathbf{F}_p)$.

- Person 1 sends $nG$ and person 2 sends $mG$, for random $n$ and $m$.

- The shared secret is the point $nmG$.

### Big problem

- How on earth are you going to know that $G$ has order that is not just a product of small primes?

- This is nothing like testing $(p-1)/2$ for primality.

- Seems really hard.
︡89f53aa5-4366-4f49-99af-ba612aaebe69︡{"html":"<h2>Diffie-Hellman on an elliptic curve</h2>\n\n<p>Introduced to the world by our very own Neal Koblitz (and also by Victor Miller at the same time)&#8230;</p>\n\n<ul>\n<li><p>Choose a specific elliptic curve $E$ over a finite field $\\mathbf{F}_p$ (same thing as $\\mathbf{Z}/p\\mathbf{Z}$.</p></li>\n<li><p>Choose a specific point $G \\in E(\\mathbf{F}_p)$.</p></li>\n<li><p>Person 1 sends $nG$ and person 2 sends $mG$, for random $n$ and $m$.</p></li>\n<li><p>The shared secret is the point $nmG$.</p></li>\n</ul>\n\n<h3>Big problem</h3>\n\n<ul>\n<li><p>How on earth are you going to know that $G$ has order that is not just a product of small primes?</p></li>\n<li><p>This is nothing like testing $(p-1)/2$ for primality. </p></li>\n<li><p>Seems really hard.</p></li>\n</ul>\n"}︡
︠b99c7aec-d9e2-49cd-8e50-8090a87f8183︠
# Rene Schoof didn't think so...
salvus.file('9aa5a04f7649.jpg')
︡de35b4f5-7155-453a-ae71-26df79f074d6︡{"once":false,"file":{"show":true,"uuid":"48eab665-1445-439a-b854-c602e84d47a2","filename":"9aa5a04f7649.jpg"}}︡
︠efe545b4-bc6f-4825-9a84-9e1a01ef60bei︠

%md
### Schoof's idea

- No obvious way to compute $\# E(\mathbf{F}_p)$ **directly**.

- So sneak up on it, by cleverly computing $\# E(\mathbf{F}_p) \pmod{\ell}$ for many primes $\ell$.

- Then, use the Chinese Remainder theorem to obtain the integer $\# E(\mathbf{F}_p)$.

Schoof figured out how to compute $\# E(\mathbf{F}_p) \pmod{\ell}$ efficiently by explicitly computing information about the Frobenius map:

$$
  (x,y) \mapsto (x^p, y^p)
$$

on the subgroup of elements of $\# E(\mathbf{F}_{p^r})$ of order dividing $\ell$...   (Here $\mathbf{F}_{p^r}$ is a sufficiently large finite field.)

Full details are well beyond the scope of this course.

But you can try it out!
︡d137870e-5139-4755-b44f-f47d42350ce8︡{"html":"<h3>Schoof&#8217;s idea</h3>\n\n<ul>\n<li><p>No obvious way to compute $\\# E(\\mathbf{F}_p)$ <strong>directly</strong>.</p></li>\n<li><p>So sneak up on it, by cleverly computing $\\# E(\\mathbf{F}_p) \\pmod{\\ell}$ for many primes $\\ell$.</p></li>\n<li><p>Then, use the Chinese Remainder theorem to obtain the integer $\\# E(\\mathbf{F}_p)$.</p></li>\n</ul>\n\n<p>Schoof figured out how to compute $\\# E(\\mathbf{F}_p) \\pmod{\\ell}$ efficiently by explicitly computing information about the Frobenius map:</p>\n\n<p>$$\n  (x,y) \\mapsto (x^p, y^p)\n$$</p>\n\n<p>on the subgroup of elements of $\\# E(\\mathbf{F}_{p^r})$ of order dividing $\\ell$&#8230;   (Here $\\mathbf{F}_{p^r}$ is a sufficiently large finite field.)</p>\n\n<p>Full details are well beyond the scope of this course.</p>\n\n<p>But you can try it out!</p>\n"}︡
︠49402d2d-270d-4cc9-a3c9-949bdc610349︠
p = next_prime(10^40); p
︡61fd023e-c629-4caf-b3f4-76ac321ce155︡{"stdout":"10000000000000000000000000000000000000121"}︡{"stdout":"\n"}︡
︠fcad2563-656a-4f45-b200-797938432548︠
E = EllipticCurve(GF(p), [2,3]); E
︡64ef3e00-ceaa-4c3f-8061-c8782e99cb13︡{"stdout":"Elliptic Curve defined by y^2 = x^3 + 2*x + 3 over Finite Field of size 10000000000000000000000000000000000000121\n"}︡
︠5b3975b5-e338-4cd0-80b8-cd2ee0a26b59︠
%time n = E.cardinality(); n  # this uses Schoof's algorithm
︡f01f799e-45ed-4297-8ca9-9ad1f4544125︡{"stdout":"10000000000000000000119408859820876289124\n"}︡{"stdout":"CPU time: 0.00 s, Wall time: 0.00 s\n"}︡
︠bde8b507-db2f-4a19-914b-6c74c243beb7︠
factor(n)
︡de1725fd-2322-4bee-bb2f-eaf567111815︡{"stdout":"2^2 * 11 * 41 * 281 * 317 * 62229725412332293691094486079303\n"}︡
︠1447390f-fb33-4995-9f71-3ee5b1125547i︠
%md

**Homework:** Get a sense of the complexity.  Does it get twice as hard to compute cardinality as we had a digit, or polynomial harder?  (The claim that the algorithm is *fast* is the claim that it gets only a bit harder as we add digits.)  Also figure out the polynomial in Sage.
︡7bc10bfc-6f70-4c6a-b03c-33d66c97869e︡{"html":"<p><strong>Homework:</strong> Get a sense of the complexity.  Does it get twice as hard to compute cardinality as we had a digit, or polynomial harder?  (The claim that the algorithm is <em>fast</em> is the claim that it gets only a bit harder as we add digits.)  Also figure out the polynomial in Sage.</p>\n"}︡
︠b5dfc0a0-e05b-45a9-933a-49501a6f163d︠

︠fa72493b-ef75-43fe-a1bd-a44bd321df20︠

︠aae54416-d277-48a8-b87d-85baa84d0e34i︠
%md
### Let's try it out Diffie-Hellman on this elliptic curve
︡3d33ae79-d59e-4fb0-aaee-61eb00a54447︡{"html":"<h3>Let&#8217;s try it out Diffie-Hellman on this elliptic curve</h3>\n"}︡
︠c9381eaf-83fa-4fd9-932c-bea545b4297c︠
p = next_prime(10^40); p
E = EllipticCurve(GF(p), [2,3]); E
P = E([7640606313052404727871466222990343759309, 2848268726722914253557401365971633049742])  # found using #E.random_point()
︡09a5a151-5383-4dff-bf02-15569eaa00c5︡{"stdout":"10000000000000000000000000000000000000121\n"}︡{"stdout":"Elliptic Curve defined by y^2 = x^3 + 2*x + 3 over Finite Field of size 10000000000000000000000000000000000000121\n"}︡
︠c53a062d-f252-4cbe-86c0-883a56987015︠
P.order().factor()
︡93e3799f-9df7-47a2-8388-7038eb533364︡{"stdout":"11 * 281 * 317 * 62229725412332293691094486079303"}︡{"stdout":"\n"}︡
︠0eda9bf0-042a-4730-b7c8-6b287f5fb4b6︠
n = randrange(1,10^40)
︡e44c9049-02e9-40cb-b5b9-2af18dcda5ce︡
︠090b604c-73f2-4dbc-bdf8-d5fa68ea5eb6︠
n*P
︡c844ce24-2b29-4d21-88d8-a2dd15fe2e83︡{"stdout":"(9742018745458282596957305481344155761073 : 3305191629911698505564085013673311187248 : 1)\n"}︡
︠d124c494-2b1f-4500-bdf0-daf5ad7ecd95︠
# somebody else do this:
#    m = randrange(1,10^40)
#    m*P
︠a2a4673c-b7fa-470b-83e9-1c2ebdd51d34︠
mP = E([ ??? ])
secret = n*mP


︠5077bfc5-7cc0-4da1-94d5-0cabe40f8799i︠

%md
#### Coming up -- how elliptic curves are used in Bitcoin, Playstation, Microsoft DRM, etc...
︡176fa0c9-f994-48e2-8624-f8e1668e6d18︡{"html":"<h4>Coming up &#8211; how elliptic curves are used in Bitcoin, Playstation, Microsoft DRM, etc&#8230;</h4>\n"}︡
︠f137d972-2b67-4b0c-87ce-759c51e241aa︠









